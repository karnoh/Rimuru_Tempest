/*
Step 1: Declare variables to store the number of rows, the start and end time, and the execution time of the data loading process. Also declare an exit handler to handle any errors or warnings that may occur during the execution.
Step 2: Create a temporary session table with the same columns as the CSV file to store the data from the file.
Step 3: Import the data from the CSV file into the temporary table. The file name is passed as an input parameter to the stored procedure. If the file has a header row, skip it during the import.
Step 4: Get the number of rows in the temporary table and check if it is greater than zero. If not, display a message that no records were found and end the procedure.
Step 5: If the temporary table has records, insert them into the certificate_table. During the insertion, perform the following transformations:
Cast the columns of the temporary table to match the data types of the certificate_table columns.
Convert the expiration_date column from a string to a date format using the specified logic.
Set the received_timestamp column to the current timestamp.
Set the alert_type column based on the expiration_date column using the specified logic.
Step 6: Get the start and end time of the insertion operation and calculate the execution time. Display the number of rows inserted and the time taken.
Step 7: Drop the temporary table
*/

CREATE OR REPLACE PROCEDURE LOAD_DATA_FROM_CSV (
    IN FILE_NAME VARCHAR(100)
)
LANGUAGE SQL
BEGIN
    DECLARE TEMP_TABLE_NAME VARCHAR(100) DEFAULT 'TEMP_CERTIFICATE_TABLE';
    DECLARE ROW_COUNT INTEGER;
    DECLARE START_TIME TIMESTAMP;
    DECLARE END_TIME TIMESTAMP;
    DECLARE EXEC_TIME VARCHAR(20);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION, SQLWARNING
    BEGIN
        SIGNAL SQLSTATE '99999'
            SET MESSAGE_TEXT = 'An error occurred: ' || SQLERRM;
    END;

    SET START_TIME = CURRENT TIMESTAMP;

    CREATE OR REPLACE SESSION TABLE TEMP_TABLE_NAME (
        no VARCHAR(50),
        path VARCHAR(200),
        name VARCHAR(100),
        status VARCHAR(20),
        expiration_date VARCHAR(50)
    );

    IMPORT FROM FILE_NAME OF DEL SKIPROWS 1 INSERT INTO TEMP_TABLE_NAME;

    SELECT COUNT(*) INTO ROW_COUNT FROM TEMP_TABLE_NAME;

    IF ROW_COUNT > 0 THEN
        INSERT INTO certificate_table (
            no, path, name, status, expiration_date, received_timestamp, alert_type
        )
        SELECT
            CAST(no AS VARCHAR(50)),
            CAST(path AS VARCHAR(200)),
            CAST(name AS VARCHAR(100)),
            CAST(status AS VARCHAR(20)),
            TO_CHAR(TO_TIMESTAMP(REPLACE(expiration_date,'UTC',''),'Day Mon dd HH24:MI:SS YYYY'),'YYYY-MM-DD'),
            CURRENT TIMESTAMP,
            CASE
                WHEN TO_DATE(TO_CHAR(TO_TIMESTAMP(REPLACE(expiration_date,'UTC',''),'Day Mon dd HH24:MI:SS YYYY'),'YYYY-MM-DD'),'YYYY-MM-DD') < CURRENT DATE THEN 'Critical'
                WHEN TO_DATE(TO_CHAR(TO_TIMESTAMP(REPLACE(expiration_date,'UTC',''),'Day Mon dd HH24:MI:SS YYYY'),'YYYY-MM-DD'),'YYYY-MM-DD') > CURRENT DATE AND TO_DATE(TO_CHAR(TO_TIMESTAMP(REPLACE(expiration_date,'UTC',''),'Day Mon dd HH24:MI:SS YYYY'),'YYYY-MM-DD'),'YYYY-MM-DD') <= (CURRENT DATE + 3 MONTHS) THEN 'Warning'
                ELSE 'Live'
            END
        FROM TEMP_TABLE_NAME;

        SET END_TIME = CURRENT TIMESTAMP;
        SET EXEC_TIME = VARCHAR(END_TIME - START_TIME);

        CALL DBMS_OUTPUT.PUT_LINE('Rows inserted: ' || ROW_COUNT);
        CALL DBMS_OUTPUT.PUT_LINE('Execution time: ' || EXEC_TIME);

    ELSE
        CALL DBMS_OUTPUT.PUT_LINE('No records found in the temporary table');
    END IF;

    DROP TABLE TEMP_TABLE_NAME;
END
